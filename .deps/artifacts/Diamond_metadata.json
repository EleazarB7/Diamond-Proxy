{
	"compiler": {
		"version": "0.8.15+commit.e14f2714"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "target",
								"type": "address"
							},
							{
								"internalType": "enum IDiamondWritable.FacetCutAction",
								"name": "action",
								"type": "uint8"
							},
							{
								"internalType": "bytes4[]",
								"name": "selectors",
								"type": "bytes4[]"
							}
						],
						"indexed": false,
						"internalType": "struct IDiamondWritable.FacetCut[]",
						"name": "facetCuts",
						"type": "tuple[]"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "DiamondCut",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "target",
								"type": "address"
							},
							{
								"internalType": "enum IDiamondWritable.FacetCutAction",
								"name": "action",
								"type": "uint8"
							},
							{
								"internalType": "bytes4[]",
								"name": "selectors",
								"type": "bytes4[]"
							}
						],
						"internalType": "struct IDiamondWritable.FacetCut[]",
						"name": "facetCuts",
						"type": "tuple[]"
					},
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "diamondCut",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					}
				],
				"name": "facetAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "facet",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "facetAddresses",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "addresses",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "facet",
						"type": "address"
					}
				],
				"name": "facetFunctionSelectors",
				"outputs": [
					{
						"internalType": "bytes4[]",
						"name": "selectors",
						"type": "bytes4[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "facets",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "target",
								"type": "address"
							},
							{
								"internalType": "bytes4[]",
								"name": "selectors",
								"type": "bytes4[]"
							}
						],
						"internalType": "struct IDiamondReadable.Facet[]",
						"name": "diamondFacets",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFallbackAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nomineeOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "fallbackAddress",
						"type": "address"
					}
				],
				"name": "setFallbackAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"diamondCut((address,uint8,bytes4[])[],address,bytes)": {
					"params": {
						"data": "optional initialization function call data",
						"facetCuts": "array of structured Diamond facet update data",
						"target": "optional target of initialization delegatecall"
					}
				},
				"facetAddress(bytes4)": {
					"params": {
						"selector": "function selector to query"
					},
					"returns": {
						"facet": "facet address (zero address if not found)"
					}
				},
				"facetAddresses()": {
					"returns": {
						"addresses": "array of facet addresses"
					}
				},
				"facetFunctionSelectors(address)": {
					"params": {
						"facet": "address of facet to query"
					},
					"returns": {
						"selectors": "array of function selectors"
					}
				},
				"facets()": {
					"returns": {
						"diamondFacets": "array of structured facet data"
					}
				},
				"getFallbackAddress()": {
					"returns": {
						"_0": "fallback address"
					}
				},
				"owner()": {
					"returns": {
						"_0": "conrtact owner"
					}
				},
				"setFallbackAddress(address)": {
					"params": {
						"fallbackAddress": "fallback address"
					}
				},
				"supportsInterface(bytes4)": {
					"params": {
						"interfaceId": "interface id"
					},
					"returns": {
						"_0": "bool whether interface is supported"
					}
				},
				"transferOwnership(address)": {
					"params": {
						"account": "address of new owner"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "accept transfer of contract ownership"
				},
				"diamondCut((address,uint8,bytes4[])[],address,bytes)": {
					"notice": "update diamond facets and optionally execute arbitrary initialization function"
				},
				"facetAddress(bytes4)": {
					"notice": "get the address of the facet associated with given selector"
				},
				"facetAddresses()": {
					"notice": "get addresses of all facets used by diamond"
				},
				"facetFunctionSelectors(address)": {
					"notice": "get all selectors for given facet address"
				},
				"facets()": {
					"notice": "get all facets and their selectors"
				},
				"getFallbackAddress()": {
					"notice": "get the address of the fallback contract"
				},
				"nomineeOwner()": {
					"notice": "get the nominated owner who has permission to call acceptOwnership"
				},
				"owner()": {
					"notice": "get the ERC173 contract owner"
				},
				"setFallbackAddress(address)": {
					"notice": "set the address of the fallback contract"
				},
				"supportsInterface(bytes4)": {
					"notice": "query whether contract has registered support for given interface"
				},
				"transferOwnership(address)": {
					"notice": "transfer contract ownership to new account"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/DiamondProxy.sol": "Diamond"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/DiamondProxy.sol": {
			"keccak256": "0xa7ed446435297d3d03e26d0b05f33ef9733b9ea7e4eb4c977af74e09216d949d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c04d23616522a55865f9db5b2d681567e0af66fe904cf475aba95ddb26dae2f3",
				"dweb:/ipfs/QmaMeFq5MNVJubcRRoEYSaixKtVb5ntxWWMdKkzxQXFguc"
			]
		},
		"@solidstate/contracts/access/IERC173.sol": {
			"keccak256": "0x9b18a5ad66323c65a81ecd62c3536db99115fe69a30b56a04409de941da7deb6",
			"license": "MIT",
			"urls": [
				"bzz-raw://a93684363c5bfd4e31fa2cc2d3402e9451ba61c7dbb404e8e50658610fb2a555",
				"dweb:/ipfs/QmanFgF5v5GjBBrAEYCpaZyXRFRvzLGgB8SQcSEf9Dkj5Q"
			]
		},
		"@solidstate/contracts/access/IERC173Internal.sol": {
			"keccak256": "0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89",
			"license": "MIT",
			"urls": [
				"bzz-raw://c32cfda38b44878ab196d32eeb72823a9f9904e8193286c787caccfb2e5bfa75",
				"dweb:/ipfs/QmfBNKWUSKaJtYL3JJ3YFioXCVFeeakqQ4cR5XzAxxZkCx"
			]
		},
		"@solidstate/contracts/access/ownable/IOwnable.sol": {
			"keccak256": "0x3ca3488175483688dfa4ee0a376eefd6e453570f4fe560a5f3b155b50ed058b5",
			"license": "MIT",
			"urls": [
				"bzz-raw://a84281160fdb17c30187bf2a81e1c21bd857aa8a9ae47e95b907a158d555d0e4",
				"dweb:/ipfs/QmSg2MYt7Gkkn6mAecyn3DKSpDVoZEn2xBP64DrsVBbAjw"
			]
		},
		"@solidstate/contracts/access/ownable/IOwnableInternal.sol": {
			"keccak256": "0x274142e420e9b2ceab2d81a844f0036fb13afc7f0647fab7ff54289db5b0818a",
			"license": "MIT",
			"urls": [
				"bzz-raw://d9be953661f436001ed63c4d48f3beebad819ab986296a232c102f224aa8bfda",
				"dweb:/ipfs/QmdDdShcEfUCYup9Dj2iM1qh7UMLHV4rKrnvhybZXr7Kbp"
			]
		},
		"@solidstate/contracts/access/ownable/ISafeOwnable.sol": {
			"keccak256": "0x6d321531723ca42e2492dbee44c64c75e454b234bf770f74151819fecdc5870a",
			"license": "MIT",
			"urls": [
				"bzz-raw://5d599979f225e9176775c6cade9332df4796d285dce966932facf600590af6b0",
				"dweb:/ipfs/QmdGVbqG4psWvFtK9RmNMQWWyw7xC7iXMJw5ib4c6anyby"
			]
		},
		"@solidstate/contracts/access/ownable/ISafeOwnableInternal.sol": {
			"keccak256": "0xc062acc81046fe730bbba85b3ca47e601f5634f2e2b7943d2d87f7d45853a8e7",
			"license": "MIT",
			"urls": [
				"bzz-raw://b296699e2a2b64964708719a05676b77aae4a4f9b965300e0e883bc9e9fb8e2d",
				"dweb:/ipfs/QmWAaxPeE8DAHzvzhRRw8HQvMbTxU1yTeNP9gEqi7V8yPG"
			]
		},
		"@solidstate/contracts/access/ownable/Ownable.sol": {
			"keccak256": "0x0eb61e3aba90372bacd1deb50f843baeddb7386b876befa13b501bc02d980e30",
			"license": "MIT",
			"urls": [
				"bzz-raw://2eb56eee2b24a6f28a401221a146604c3d00278b79aeea3d04ec3e68f9b02411",
				"dweb:/ipfs/QmPVYwWVmHNbA7k1ip5s8n2UwfTecYMVKqirBGgRAwLajT"
			]
		},
		"@solidstate/contracts/access/ownable/OwnableInternal.sol": {
			"keccak256": "0x550a20b31a45bc9d612418912cae6cf34fee312a004d8fe3b6fce973fa6c7dba",
			"license": "MIT",
			"urls": [
				"bzz-raw://d9a82dbf2b447b82cea3eebf762ca5b95cc524365886e3f678f7356c53ba1c3f",
				"dweb:/ipfs/Qmag7WP6rNmtn9MKPRUJsq3P97o6NqnF1ktPrjWDshk8u7"
			]
		},
		"@solidstate/contracts/access/ownable/OwnableStorage.sol": {
			"keccak256": "0xe09e65996cbd1db41f051e265e4261438b0ec08ed385be2b0727a88554dbc192",
			"license": "MIT",
			"urls": [
				"bzz-raw://1415d59d9f3a765b039a36f68ca517dfcb7bc2e339ab04bbc400adf27a6f3889",
				"dweb:/ipfs/QmSDcqGTt3dA64WKEAhqbCjRCnqf7g9LhJaiTwCdCsJsQD"
			]
		},
		"@solidstate/contracts/access/ownable/SafeOwnable.sol": {
			"keccak256": "0xfa74db2c0a66f38e7ca206b4e42230e0fa853db6539c13003bcef596a33d330b",
			"license": "MIT",
			"urls": [
				"bzz-raw://3e67850b35f8cb2ac9d4205936ca6716b02d110748740860a298a7410180afb0",
				"dweb:/ipfs/QmZHeFp6tdvtsfUeepc3tVJHS2E82JCWwJrN53Vrrd4KPc"
			]
		},
		"@solidstate/contracts/access/ownable/SafeOwnableInternal.sol": {
			"keccak256": "0x6c6b5ecd6a2da51df5409d1e918546aa672ddbc522a45facee6a7d54858f4bbf",
			"license": "MIT",
			"urls": [
				"bzz-raw://232003ba1397094e08a3d8780f505b3854e7ffa58d67defd1ed6fa7cb975ce6b",
				"dweb:/ipfs/QmQ2rU27X4azyG4z68cG76bR1C7bStedAVDRNhuZPy8QtU"
			]
		},
		"@solidstate/contracts/access/ownable/SafeOwnableStorage.sol": {
			"keccak256": "0x90003d0de9e2e18397419d462afc81fa069c39f44ec9f6436266fc98750a8242",
			"license": "MIT",
			"urls": [
				"bzz-raw://5ac09dc51f335f3e1aff66b57928d487278cf252e3bd96aa8c2eab34df5b7398",
				"dweb:/ipfs/QmTwvRWs6FKXsbzUqVJfKQCepWTwEy1xTW9Urz8TK5dJNH"
			]
		},
		"@solidstate/contracts/introspection/ERC165.sol": {
			"keccak256": "0xc2f46bfe115615fe1453ba72b1ae574e0ad366a7c1290930247ddc401beed861",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7f336327bf7046cfb8d7052c6db5215112f9cab1804ab9d386b810f76f2aa48",
				"dweb:/ipfs/QmWPdHqCZsHJtXX63krpDQ52gaKMwAGoxA5NmPy83UXEcH"
			]
		},
		"@solidstate/contracts/introspection/ERC165Storage.sol": {
			"keccak256": "0x4b7e18fa050b73c05c5fa3142a781f4d3c39350ee10ceb11001d53c36128aa5f",
			"license": "MIT",
			"urls": [
				"bzz-raw://332d1d86e4636e2a903c0526a419640a84163b4a7bf597dfd85e6c8886ddfb49",
				"dweb:/ipfs/QmNNVWPMomLYaC7U9uRepGDLzRC6tiU6cpHu9SdPJqJWhY"
			]
		},
		"@solidstate/contracts/introspection/IERC165.sol": {
			"keccak256": "0x41fd520e7dcfe254d7a2bd9463d661a481c3b55ba4d508c1dcbc071ea7777fba",
			"license": "MIT",
			"urls": [
				"bzz-raw://2abf082ef27220d0e3716372d6b5131c2f7f394bdc33eb6c2588695cc84481d1",
				"dweb:/ipfs/Qmb51bNG7rZnwevuotZtjqNqPpPf9MF5r6ZmJaYkq4NYNh"
			]
		},
		"@solidstate/contracts/proxy/IProxy.sol": {
			"keccak256": "0xe7d27c7bcd643e57c424021ca0165a92af24bcc352f92e4b2ce54bd6005f1776",
			"license": "MIT",
			"urls": [
				"bzz-raw://d435cd3efd376674cad30446f0d325e3d19bc54ef54ae4cfd24f74e9e8d58747",
				"dweb:/ipfs/QmW8p3T8rbjSe4bgKAmnHe4jKaqrPeEUrBZ1ZtA3BKAWLU"
			]
		},
		"@solidstate/contracts/proxy/Proxy.sol": {
			"keccak256": "0xb220a3840c3d99bd91ac426babebfa49b20f2e23287c40a0a77ae252e5095038",
			"license": "MIT",
			"urls": [
				"bzz-raw://662a2d6f9a34a9958794357b7b0dedab502497346431b004d86842f23473dbfb",
				"dweb:/ipfs/QmT86fMZoNM6iHtXJBAd2QiqhRGS5CMH6wsdDAxWNfNmNw"
			]
		},
		"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol": {
			"keccak256": "0xb089f900780e310797163bdc77904db5af0616839260efea48f3002b8ce257e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://89b491326e603142c496f57b74cbe45cd65d69516993f20d4329901d9860c65d",
				"dweb:/ipfs/QmXvouoSzNvtC3spuxrpemZi2Nh35rsDbepTxVNXLmWtG8"
			]
		},
		"@solidstate/contracts/proxy/diamond/SolidStateDiamond.sol": {
			"keccak256": "0x312eaa36649de2679e6c1714ab99db61183803f01c94b7f18978af4c573e287d",
			"license": "MIT",
			"urls": [
				"bzz-raw://500ec52b9bc54bc5427c570739bc8a3408b71317078dc32ecaaed56470d182e5",
				"dweb:/ipfs/QmVeikmyCB2UvDsuiKUB6PUjXpiaaMYitYmmRXytmT7KoV"
			]
		},
		"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol": {
			"keccak256": "0xa110a3fe5a23d99a27e2a6cabbdc22736f8d9a91177af9b61915ea503873f983",
			"license": "MIT",
			"urls": [
				"bzz-raw://8bf40d775d32a5b226fb795b796bf90f13ec766e422f71c9a0e64301686d13ad",
				"dweb:/ipfs/QmVyG6Nb7Lc4Br9idfii1cDH5s4vTLpydEJYYoAoEpMces"
			]
		},
		"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol": {
			"keccak256": "0x2aa1f19b9e3cd5cd7702eb0816af486841a367a9840f712019ab2112fd954a70",
			"license": "MIT",
			"urls": [
				"bzz-raw://a503938beef4fdb487bcb4981a13ef50b73538141160c9cc8b6a900c547af1be",
				"dweb:/ipfs/QmXtTHDYWcLo6frU6FTNdJYCnzVLquNsupsJtH5NnDdTt5"
			]
		},
		"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol": {
			"keccak256": "0x3329852027ffb50519a245376a1dee8f828223c0fa439bbb16a80a1bc226c2fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://4343964d070386d12d9e663607ad96e5134d4edd12234cb6412911ba77bcc5a9",
				"dweb:/ipfs/Qmbhp7gZRWRdryatZbjbgcxT4aWy9siaLWDXNoB1oCRWis"
			]
		},
		"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol": {
			"keccak256": "0x337b2a9b986934df6f426eb7e9a8ec5f294db0bbe04b29a7d5526cf0ff897515",
			"license": "MIT",
			"urls": [
				"bzz-raw://006b115506cbc73162a22b71d01ac644491a7f0c3538e068cded9014515529f1",
				"dweb:/ipfs/QmZJMTpmkt6u77WNDB99xbYGMAPrVywp4M7Y5o95YdM2Rr"
			]
		},
		"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol": {
			"keccak256": "0xfe2a5a754ba159411e162e99dad87b49edd5af6c429bbfdd801ca49da17f5f85",
			"license": "MIT",
			"urls": [
				"bzz-raw://1333e6e972df518eeae0f6667e4c55754132cb535f5e46c6af2454a54afdd479",
				"dweb:/ipfs/QmNrKPmy7fQr98P7cUdf9gKPFDtCbC39bzauYT4N5EjV5y"
			]
		},
		"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol": {
			"keccak256": "0x0a641ac8e2b6f4d8084ecf63c37215e061f27966b821b534f69ffea1d6408dcf",
			"license": "MIT",
			"urls": [
				"bzz-raw://35053f315cc45f11c88218e69b8dc7a9ea8442d77b568e9705ba17cae1cc4c5d",
				"dweb:/ipfs/QmeYk9TMpRE3WitqrMapkoNUGLmWJdX7uFT7tFJKPUUi5b"
			]
		},
		"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol": {
			"keccak256": "0x5631a54da83a44323de9018f57d0874b448ac7123adbf0c9210c484419c7365d",
			"license": "MIT",
			"urls": [
				"bzz-raw://a924ea46d1559ed1343b356182ef364720765c83e701712ff30c88b82d147ec9",
				"dweb:/ipfs/QmTVdMcEVzBSxkLMVEyyMemzbzEW8Fmb1Mks6XEVyFwqGD"
			]
		},
		"@solidstate/contracts/utils/AddressUtils.sol": {
			"keccak256": "0x71f8130712084d73c37195324325d9af09f17f0de66a76fa898dfbb573e07fb3",
			"license": "MIT",
			"urls": [
				"bzz-raw://bbe9fcd56ffad447c648141851639e285da46195ba8e19a7fa309815bd34b1c2",
				"dweb:/ipfs/QmRsbNc7QkTM1D4xGQN4idya9My74QovK23rr93tJnjzEs"
			]
		},
		"@solidstate/contracts/utils/UintUtils.sol": {
			"keccak256": "0x4c03c6cee3d8e4d9247fd3f61c4b4a711c52d3ed4026af3ad2ab51439af6b2a5",
			"license": "MIT",
			"urls": [
				"bzz-raw://84a0cf3ec16e4365a56ad4bca72d2a80d50836f46a3a8091a9bec2da461e2c21",
				"dweb:/ipfs/QmY5xvLWcgyfPWoEMcufuF4Gtb4XUXTRjn6kY5TAMykWcU"
			]
		}
	},
	"version": 1
}